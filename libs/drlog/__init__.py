"""
    The drlog module configures Python's logging system for use in a 
    Django application, and automatically makes request-specific information 
    available for inclusion in logging output. Perhaps most useful is a
    unique request identifier, obtained from Apache's mod_unique_id if 
    available, or generated by the middleware. This makes it much easier to
    trace the log entries from a specific request.
    
    Installation and configuration can be as simple as adding 
    'drlog.middleware.RequestLoggingMiddleware' at the beginning of your
    MIDDLEWARE_CLASSES setting. By default the logging system is configured
    to send its output to sys.stderr, which under Apache means your logging
    goes to the error log.
    
    If you want to direct logging to another destination, assign an instance
    of a logging.Handler subclass to DRLOG_HANDLER, e.g.:
    
        from logging.handlers import SysLogHandler
        DRLOG_HANDLER = SysLogHandler()
    
    You can also set DRLOG_APP_NAME, which is useful if you have multiple
    Django applications logging to the same destination (as with syslog).
    
    Finally, if you want to change the format, supply yours in DRLOG_FORMAT. 
    For details on the request attributes you can include, see the 
    RequestLogger class.
    
"""

import logging
import os
import re
import sys
import threading

from django.conf import settings

# thread-local store for the request object, etc.
REQUEST_CONTEXT = threading.local()

DEFAULT_FORMAT = '[%(asctime)s %(REMOTE_ADDR)s %(request_id)s %(name)s %(levelname)s] %(message)s'

# pattern for extracting logging tokens from a format string
FORMAT_TOKEN_RE = re.compile('%\(([^\)]+)\)s')

class RequestLogger(logging.Logger):
    '''
    A subclass of logging.Logger that adds the thread-local request info to 
    the logging context. The keys available for use in the format are:
    
        'request_id': the unique request identifier 
        'path': from request.path
        'method': from request.method
    
    and all the keys in request.META, so all the request headers.
    '''

    def __init__(self, name, level=logging.NOTSET):
        logging.Logger.__init__(self, name, level)

    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None):
        '''
        Add request information to the LogRecord.
        '''
        r = logging.Logger.makeRecord(self, name, level, fn, lno, msg, args, exc_info, func, extra)

        # add the contributions of RequestLoggingMiddleware
        r.__dict__['request_id'] = getattr(REQUEST_CONTEXT, 'request_id', '?')
        r.__dict__['path'] = getattr(REQUEST_CONTEXT, 'request.path', '?')
        r.__dict__['method'] = getattr(REQUEST_CONTEXT, 'request.method', '?')

        # add the contents of request.META
        if hasattr(REQUEST_CONTEXT, 'request'):
            for key,value in REQUEST_CONTEXT.request.META.items():
                r.__dict__[key] = value

        # if logging is not being done in the context of a 
        # request (from a cron job, perhaps), the missing
        # format tokens have to be fudged. 
        for token in FORMAT_TOKEN_RE.findall(FORMAT):
            if not r.__dict__.has_key(token):
                r.__dict__[token] = '?'

        return r

#
# Configure logging
#

# The appname is particularly helpful with syslog-ng, which
# can use it to redirect logging to a separate file for
# each Django app
appname = getattr(settings, 'DRLOG_APP_NAME', None)
if appname is None:
    appname = getattr(settings, 'SETTINGS_MODULE', 'django')
    appname = appname[:appname.index('.')]

# unless a log format is supplied, use the default, including
# the app name as a helpful discriminant
FORMAT = '%s: %s' % (appname, getattr(settings, 'DRLOG_FORMAT', DEFAULT_FORMAT))
    
if settings.DEBUG:
    level = logging.DEBUG
else:
    level = logging.INFO

# if no handler is specified, write to stderr, which should 
# go to the web server's error log
HANDLER = getattr(settings, 'DRLOG_HANDLER', logging.StreamHandler(sys.stderr))
HANDLER.setFormatter(logging.Formatter(FORMAT))
HANDLER.setLevel(level)

# commandeer the root logger, so Careless Programmers(TM)
# can use logging.info(), instead of having to create a
# logger with logging.getLogger(), then calling logger.info()
logging.root = RequestLogger("root", level)
logging.root.addHandler(HANDLER)
logging.root.setLevel(level)

logging.Logger.root = logging.root
logging.Logger.manager = logging.Manager(logging.Logger.root)

# make sure logging.getLogger returns RequestLoggers
logging.setLoggerClass(RequestLogger)

# done
if getattr(settings, 'DEBUG', False):
    logging.debug("drlog configured; root logger: %s, level: %s, handlers: %s, format: '%s'" % (logging.root, logging.root.getEffectiveLevel(), logging.root.handlers, FORMAT))
